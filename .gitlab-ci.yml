image: hello-world:latest

stages:
  - build-img
  - lint
  - build
  - test

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID               # Execute jobs in merge request context
    - if: $CI_COMMIT_BRANCH == 'develop'     # Execute jobs when a new commit is pushed to develop branch

variables:
  CC: gcc
  CXX: g++
  ENABLE_MPI: "1"
  ENABLE_OMP: "0"
  FC: gfortran
  GIT_DEPTH: "100"
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive
  LDFLAGS: "-lopen-pal"
  SCCACHE_BUCKET: exa-sccache
  SCCACHE_REGION: us-west-2


# run this in every job
.before_script_template: &before_script_template
  before_script:
    - find $CI_PROJECT_DIR -name '.git' -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    - git submodule update --init --force


### Build docker images ###
.build-test-env: &build_test_env_template
  stage: build-img
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --cache=true --context $CI_PROJECT_DIR --dockerfile $DOCKERFILE --destination $CI_REGISTRY_IMAGE/$IMGTAG:$CI_COMMIT_TAG
  tags:
    - docker

build-nvcc-env:
  variables:
    DOCKERFILE: .gitlab/ci_img_nvcc/Dockerfile
    IMGTAG: nvcc
  <<: *build_test_env_template

build-hip-env:
  variables:
    DOCKERFILE: .gitlab/ci_img_hip/Dockerfile
    IMGTAG: hip
  <<: *build_test_env_template

build-dpcpp-env:
  variables:
    DOCKERFILE: .gitlab/ci_img_dpcpp/Dockerfile
    IMGTAG: dpcpp
  <<: *build_test_env_template

build-ascent-env:
  variables:
    DOCKERFILE: .gitlab/ci_img_ascent/Dockerfile
    IMGTAG: ascent
  <<: *build_test_env_template


### Build ###
.build_base: &build_base
  stage: build
  <<: *before_script_template
  # artifacts:
  #   name: $CI_JOB_NAME
  #   expire_in: 1 week
  #   when: on_failure
  #   paths:
  #     - build/Testing/
  tags:
    - docker
  only:
    - develop


build:GNUMake:
  image: $CI_REGISTRY_IMAGE/nvcc
  needs: ['build-nvcc-env']
  variables:
    BUILD: ${CI_PROJECT_DIR}/build
    BOOST_HOME: ${BUILD}/boost
    CATCH2_HOME: ${BUILD}/catch2
    CGAL_HOME: ${BUILD}/cgal
    PEGTL_HOME: ${BUILD}/taocpp-pegtl
    CSGEB_HOME: ${BUILD}/subprojects/csg-eb/csg_home
    CC: gcc-9
    CXX:  g++-9
    OMPI_FC: gfortran-9
  script:
    - conan install -if build -g deploy catch2/2.13.7@
    - conan install -if build -g deploy cgal/5.2.1@
    - conan install -if build -g deploy taocpp-pegtl/3.2.1@
    - make -C subprojects/csg-eb install DESTDIR=${CSGEB_HOME} ENABLE_CGAL=1 -j4
    - make -C exec USE_CSG=TRUE -j6
  <<: *build_base


build:dpcpp:
  image: $CI_REGISTRY_IMAGE/dpcpp
  needs: ['build-dpcpp-env']
  variables:
    CC: clang-12
    CXX: dpcpp
  script:
    - source /opt/intel/oneapi/setvars.sh
    - cmake -S .
            -B build
            -DCMAKE_BUILD_TYPE=MinSizeRel
            -DMFIX_CSG=0
            -DMFIX_GPU_BACKEND=SYCL
            -DSKIP_LAUNCHER=1
            -G Ninja
    - cmake --build build
  <<: *build_base


build:hip:
  image: $CI_REGISTRY_IMAGE/hip
  needs: ['build-hip-env']
  variables:
    CC: /opt/rocm/llvm/bin/clang
    CXX: /opt/rocm/llvm/bin/clang++
  script:
    # - conan install -if build -g cmake_find_package catch2/2.13.7@
    # - conan install -if build -g cmake_find_package cgal/5.2.1@
    # - conan install -if build -g cmake_find_package taocpp-pegtl/3.2.1@
    - cmake -S .
            -B build
            -DAMReX_AMD_ARCH=gfx908
            -DCMAKE_BUILD_TYPE=MinSizeRel
            -DMFIX_CSG=0
            -DMFIX_GPU_BACKEND=HIP
            -DMFIX_MPI=0
            -G Ninja
    - cmake --build build
  <<: *build_base

build:nvcc:
  image: $CI_REGISTRY_IMAGE/nvcc
  needs: ['build-nvcc-env']
  variables:
    CC: gcc-9
    CXX: g++-9
  script:
    - cmake -S .  -B build
            -DAMReX_CUDA_ARCH=Volta
            -DCMAKE_BUILD_TYPE=MinSizeRel
            -DCMAKE_CUDA_ARCHITECTURES=70
            -DMFIX_GPU_BACKEND=CUDA
            -GNinja
    - cmake --build build
  <<: *build_base

build:csg:
  image: $CI_REGISTRY_IMAGE/nvcc
  needs: ['build-nvcc-env']
  script:
    - conan install -if build -g cmake_find_package catch2/2.13.7@
    - conan install -if build -g cmake_find_package cgal/5.2.1@
    - conan install -if build -g cmake_find_package taocpp-pegtl/3.2.1@
    - cmake -S .
            -B build
            -DCMAKE_BUILD_TYPE=MinSizeRel
            -DCMAKE_MODULE_PATH=$PWD/build
            -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wnull-dereference -Werror -pedantic -pedantic-errors"
            -DMFIX_CSG=ON
    - cmake --build build --target functional_tests
    - ./build/src/eb/tests/functional_tests
  <<: *build_base

## LINT ###
.lint: &lint_template
  stage: lint
  needs: ['build-nvcc-env']
  image: $CI_REGISTRY_IMAGE/nvcc
  <<: *before_script_template
  tags:
    - docker
  allow_failure: true

lint:shellcheck:
  <<: *lint_template
  script:
    - find . -name "*.sh" -not -path "./subprojects/*" | xargs shellcheck -e SC2086,SC2125,SC2046,SC2129,SC2044

lint:gcc:warnings:
  <<: *lint_template
  variables:
    CC: gcc
    CXX: g++
  script:
    - cmake -S .
            -B build
            -DCMAKE_BUILD_TYPE=Debug
            -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wnull-dereference -Werror -pedantic -pedantic-errors"
            -GNinja
    - cmake --build build --target mfix build_tests -- -k0

lint:clang:warnings:
  <<: *lint_template
  variables:
    CC: clang-12
    CXX: clang++-12
  script:
    - cmake -S .
            -B build
            -DCMAKE_BUILD_TYPE=Debug
            -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wno-unused-lambda-capture -Wnull-dereference -Werror"
            -DMFIX_MPI=0
            -GNinja
    - cmake --build build --target mfix build_tests -- -k0

lint:spelling:
  <<: *lint_template
  script:
    - rm -rf subprojects
    - codespell --ignore-words-list ba,blocs,inout,ith,od,wen,structed,te --enable-colors --quiet-level 2

## CTESTS ###
.test: &test_template
  stage: test
  <<: *before_script_template
  artifacts:
    name: $CI_JOB_NAME
    expire_in: 1 week
    when: on_failure
    paths:
      - build/Testing/
  only:
    - schedules

.ctest: &ctest_template
  image: $CI_REGISTRY_IMAGE/nvcc
  needs: ['build-nvcc-env']
  script:
    - cmake -S .
            -B build
            -DMFIX_MPI=$ENABLE_MPI
            -DMFIX_OMP=$ENABLE_OMP
            -G Ninja
    - cmake --build build --target build_tests
    - cd build
    - srun ctest -R $CTEST_LABEL
  tags:
    - docker
  <<: *test_template

test:single-serial:
  variables:
    CTEST_LABEL: SGS
  <<: *ctest_template

test:multiple-serial:
  variables:
    CTEST_LABEL: MGS
  <<: *ctest_template

test:tiled-serial:
  variables:
    CTEST_LABEL: TGS
  <<: *ctest_template

test:multiple-parallel:
  variables:
    CTEST_LABEL: MGP
    OMPI_MCA_rmaps_base_oversubscribe: 1
  <<: *ctest_template

test:tiled-parallel-openmp:
  variables:
    ENABLE_MPI: 0
    ENABLE_OMP: 1
    CTEST_LABEL: TGP
  <<: *ctest_template

## ASCENT Tests ###
.ascent: &ascent_template
  stage: test
  needs: ['build-ascent-env']
  image: $CI_REGISTRY_IMAGE/ascent
  <<: *before_script_template
  tags:
    - docker
  allow_failure: false

test:ascent:build-and-run:
  <<: *ascent_template
  variables:
    CC: gcc
    CXX: g++
  script:
    - cmake -S .
            -B build
            -DAMReX_CONDUIT=ON -DAMReX_ASCENT=ON
            -GNinja
    - cmake --build build
    - |
      mkdir ascent_run
      pushd ascent_run
      cp ../benchmarks/01-HCS/Size0001/inputs inputs
      cp ../benchmarks/01-HCS/Size0001/particle_input.dat particle_input.dat
    - |
      echo '-
        action: "add_pipelines"
        pipelines:
          pl1:
            f1:
              type: "composite_vector"
              params:
                field1: "u_g"
                field2: "v_g"
                field3: "w_g"
                output_name: "vel_g"
            f2:
              type: "vector_magnitude"
              params:
                field: "vel_g"
                output_name: "vel_g_mag"
            f3:
              type: "3slice"
              params:
                topology: 'topo'
                x_offset: 0.00
                y_offset: 0.00
                z_offset: 0.00
            f4:
              type: "composite_vector"
              params:
                field1: "velx"
                field2: "vely"
                field3: "velz"
                output_name: "V"
            f5:
              type: "vector_magnitude"
              params:
                field: "V"
                output_name: "vel"
      -
        action: "add_scenes"
        scenes:
          s1:
            plots:
              p1:
                type: "pseudocolor"
                pipeline: "pl1"
                field: "vel_g_mag"
                min_value: -0.1
                max_value:  0.1
              p2:
                type: "pseudocolor"
                pipeline: "pl1"
                field: "vel"
                points:
                  radius: 0.000050
                min_value:  0.0
                max_value:  2.0
                color_table:
                  name: "Jet"
                  reverse: "false"
                  annotation: "false"
            renders:
              r1:
                image_width: 480
                image_height: 480
                image_prefix: "./slice_vel_%04d"
                annotations: "false"
                bg_color: [ 1.0,  1.0,  1.0]
                fg_color: [ 0.0,  0.0,  0.0]
                render_bg: "true"
                camera:
                  position: [  0.016,  0.012,  0.016]
                  look_at:  [  0.004,  0.003,  0.004]
                  up: [ -0.27,  0.93, -0.27]
                  zoom: 2.0
      ' > ascent_actions.yaml
    - cat ascent_actions.yaml
    - ../build/mfix inputs amr.ascent_int=10 ascent.actions="ascent_actions.yaml"
    - |
      pngs=(`find ./ -maxdepth 1 -name "*.png"`)
      if [ ${#pngs[@]} -eq 4 ]; then exit 0; else echo "expected_pngs=1,actual_pngs=${#pngs[@]}"; exit 1; fi
