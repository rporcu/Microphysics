image: hello-world:latest

stages:
  - build-img
  - lint
  - build
  - test

# workflow:
#   rules:
#     - if: $CI_MERGE_REQUEST_ID               # Execute jobs in merge request context
#     - if: $CI_COMMIT_BRANCH == 'develop'     # Execute jobs when a new commit is pushed to develop branch

variables:
  CC: gcc
  CXX: g++
  ENABLE_MPI: "1"
  ENABLE_OMP: "0"
  FC: gfortran
  GIT_DEPTH: "100"
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive
  LDFLAGS: "-lopen-pal"
  SCCACHE_BUCKET: exa-sccache
  SCCACHE_REGION: us-west-2


# run this in every job
.before_script_template: &before_script_template
  before_script:
    - find $CI_PROJECT_DIR -name '.git' -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    - git submodule update --init --force


### Build docker images ###
.build-test-env: &build_test_env_template
  stage: build-img
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --cache=true --context $CI_PROJECT_DIR --dockerfile $DOCKERFILE --destination $CI_REGISTRY_IMAGE/$IMGTAG:$CI_COMMIT_TAG
  tags:
    - docker

build-nvcc-env:
  variables:
    DOCKERFILE: .gitlab/ci_img_nvcc/Dockerfile
    IMGTAG: nvcc
  <<: *build_test_env_template

build-rocm-env:
  variables:
    DOCKEFILE: .gitlab/ci_img_rocm/Dockerfile
    IMGTAG: rocm
  <<: *build_test_env_template


### Build ###
# build:GNUMake:
#   stage: test
#   variables:
#     BUILD: ${CI_PROJECT_DIR}/build
#     BOOST_HOME: ${BUILD}/boost
#     CATCH2_HOME: ${BUILD}/catch2
#     CGAL_HOME: ${BUILD}/cgal
#     PEGTL_HOME: ${BUILD}/taocpp-pegtl
#     CSGEB_HOME: ${BUILD}/subprojects/csg-eb/csg_home
#   script:
#     - conan install -if build -g deploy catch2/2.13.7@
#     - conan install -if build -g deploy cgal/5.2.1@
#     - conan install -if build -g deploy taocpp-pegtl/3.2.1@
#     - make -C subprojects/csg-eb install DESTDIR=${CSGEB_HOME} ENABLE_CGAL=1 -j4
#     - make -C exec USE_CSG=TRUE -j4
#   only:
#     - schedules
#   tags:
#     - ubuntu-shell

.build_base: &build_base
  stage: build
  <<: *before_script_template
  artifacts:
    name: $CI_JOB_NAME
    expire_in: 1 week
    when: on_failure
    paths:
      - build/Testing/
  # only:
  #   - develop

# build:dpcpp:
#   variables:
#     CC: clang
#     CXX: dpcpp
#   script:
#     - source /home/ssm-user/spack/share/spack/setup-env.sh
#     - spack load catch2
#     - spack load cgal
#     - spack load pegtl
#     - source /opt/intel/oneapi/setvars.sh
#     - cmake -S .
#             -B build
#             -DCMAKE_BUILD_TYPE=MinSizeRel
#             -DMFIX_CSG=1
#             -DMFIX_GPU_BACKEND=SYCL
#             -DSKIP_LAUNCHER=1
#             -G Ninja
#     - cmake --build build
#   <<: *build_base
#   tags:
#     - ubuntu-shell

build:hip:
  image: $CI_REGISTRY_IMAGE/rocm
  needs: ['build-rocm-env']
  variables:
    CC: /opt/rocm/llvm/bin/clang
    CXX: /opt/rocm/llvm/bin/clang++
  script:
    - cmake -S .
            -B build
            -DAMReX_AMD_ARCH=gfx908
            -DCMAKE_BUILD_TYPE=MinSizeRel
            -DMFIX_CSG=1
            -DMFIX_GPU_BACKEND=HIP
            -DMFIX_MPI=0
            -G Ninja
    - cmake --build build
  <<: *build_base
  tags:
    - docker

# build:nvcc:
#   image: $CI_REGISTRY_IMAGE/nvcc
#   needs: ['build-nvcc-env']
#   variables:
#     CC: gcc-9
#     CXX: g++-9
#   script:
#     - cmake -S .  -B build
#             -DAMReX_CUDA_ARCH=Volta
#             -DCMAKE_BUILD_TYPE=MinSizeRel
#             -DCMAKE_CUDA_ARCHITECTURES=70
#             -DMFIX_GPU_BACKEND=CUDA
#             -GNinja
#     - cmake --build build
#   <<: *build_base
#   tags:
#     - docker
#
# build:csg:
#   image: $CI_REGISTRY_IMAGE/nvcc
#   needs: ['build-nvcc-env']
#   script:
#     - conan install -if build -g cmake_find_package catch2/2.13.7@
#     - conan install -if build -g cmake_find_package cgal/5.2.1@
#     - conan install -if build -g cmake_find_package taocpp-pegtl/3.2.1@
#     - cmake -S .
#             -B build
#             -DCMAKE_BUILD_TYPE=MinSizeRel
#             -DCMAKE_MODULE_PATH=$PWD/build
#             -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wnull-dereference -Werror -pedantic -pedantic-errors"
#             -DMFIX_CSG=ON
#     - cmake --build build --target functional_tests
#     - ./build/src/eb/tests/functional_tests
#   <<: *build_base
#   tags:
#     - docker

### LINT ###
# .lint: &lint_template
#   stage: lint
#   needs: ['build-nvcc-env']
#   image: $CI_REGISTRY_IMAGE/nvcc
#   <<: *before_script_template
#   tags:
#     - docker
#   allow_failure: true
#
# lint:shellcheck:
#   <<: *lint_template
#   script:
#     - find . -name "*.sh" -not -path "./subprojects/*" | xargs shellcheck -e SC2086,SC2125,SC2046,SC2129,SC2044
#
# lint:gcc:warnings:
#   <<: *lint_template
#   variables:
#     CC: gcc
#     CXX: g++
#   script:
#     - cmake -S .
#             -B build
#             -DCMAKE_BUILD_TYPE=Debug
#             -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wnull-dereference -Werror -pedantic -pedantic-errors"
#             -GNinja
#     - cmake --build build --target mfix build_tests -- -k0
#
# lint:clang:warnings:
#   <<: *lint_template
#   variables:
#     CC: clang-12
#     CXX: clang++-12
#   script:
#     - cmake -S .
#             -B build
#             -DCMAKE_BUILD_TYPE=Debug
#             -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wno-unused-lambda-capture -Wnull-dereference -Werror"
#             -DMFIX_MPI=0
#             -GNinja
#     - cmake --build build --target mfix build_tests -- -k0
#
# lint:spelling:
#   <<: *lint_template
#   script:
#     - rm -rf subprojects
#     - codespell --ignore-words-list ba,blocs,inout,ith,od,wen,structed,te --enable-colors --quiet-level 2

## .test: &test_template
#   stage: test
#   <<: *before_script_template
#   artifacts:
#     name: $CI_JOB_NAME
#     expire_in: 1 week
#     when: on_failure
#     paths:
#       - build/Testing/
#   only:
#     - schedules
#
#
# .ctest: &ctest_template
#   image: $CI_REGISTRY_IMAGE/nvcc
#   needs: ['build-nvcc-env']
#   script:
#     - cmake -S .
#             -B build
#             -DMFIX_MPI=$ENABLE_MPI
#             -DMFIX_OMP=$ENABLE_OMP
#             -G Ninja
#     - cmake --build build --target build_tests
#     - cd build
#     - srun ctest -R $CTEST_LABEL
#   tags:
#     - docker
#   <<: *test_template
#
# test:single-serial:
#   variables:
#     CTEST_LABEL: SGS
#   <<: *ctest_template
#
# test:multiple-serial:
#   variables:
#     CTEST_LABEL: MGS
#   <<: *ctest_template
#
# test:tiled-serial:
#   variables:
#     CTEST_LABEL: TGS
#   <<: *ctest_template
#
# test:multiple-parallel:
#   variables:
#     CTEST_LABEL: MGP
#     OMPI_MCA_rmaps_base_oversubscribe: 1
#   <<: *ctest_template
#
# test:tiled-parallel-openmp:
#   variables:
#     ENABLE_MPI: 0
#     ENABLE_OMP: 1
#     CTEST_LABEL: TGP
#   <<: *ctest_template# .test: &test_template
#   stage: test
#   <<: *before_script_template
#   artifacts:
#     name: $CI_JOB_NAME
#     expire_in: 1 week
#     when: on_failure
#     paths:
#       - build/Testing/
#   only:
#     - schedules
#
#
# .ctest: &ctest_template
#   image: $CI_REGISTRY_IMAGE/nvcc
#   needs: ['build-nvcc-env']
#   script:
#     - cmake -S .
#             -B build
#             -DMFIX_MPI=$ENABLE_MPI
#             -DMFIX_OMP=$ENABLE_OMP
#             -G Ninja
#     - cmake --build build --target build_tests
#     - cd build
#     - srun ctest -R $CTEST_LABEL
#   tags:
#     - docker
#   <<: *test_template
#
# test:single-serial:
#   variables:
#     CTEST_LABEL: SGS
#   <<: *ctest_template
#
# test:multiple-serial:
#   variables:
#     CTEST_LABEL: MGS
#   <<: *ctest_template
#
# test:tiled-serial:
#   variables:
#     CTEST_LABEL: TGS
#   <<: *ctest_template
#
# test:multiple-parallel:
#   variables:
#     CTEST_LABEL: MGP
#     OMPI_MCA_rmaps_base_oversubscribe: 1
#   <<: *ctest_template
#
# test:tiled-parallel-openmp:
#   variables:
#     ENABLE_MPI: 0
#     ENABLE_OMP: 1
#     CTEST_LABEL: TGP
#   <<: *ctest_template .test: &test_template
#   stage: test
#   <<: *before_script_template
#   artifacts:
#     name: $CI_JOB_NAME
#     expire_in: 1 week
#     when: on_failure
#     paths:
#       - build/Testing/
#   only:
#     - schedules
#
#
# .ctest: &ctest_template
#   image: $CI_REGISTRY_IMAGE/nvcc
#   needs: ['build-nvcc-env']
#   script:
#     - cmake -S .
#             -B build
#             -DMFIX_MPI=$ENABLE_MPI
#             -DMFIX_OMP=$ENABLE_OMP
#             -G Ninja
#     - cmake --build build --target build_tests
#     - cd build
#     - srun ctest -R $CTEST_LABEL
#   tags:
#     - docker
#   <<: *test_template
#
# test:single-serial:
#   variables:
#     CTEST_LABEL: SGS
#   <<: *ctest_template
#
# test:multiple-serial:
#   variables:
#     CTEST_LABEL: MGS
#   <<: *ctest_template
#
# test:tiled-serial:
#   variables:
#     CTEST_LABEL: TGS
#   <<: *ctest_template
#
# test:multiple-parallel:
#   variables:
#     CTEST_LABEL: MGP
#     OMPI_MCA_rmaps_base_oversubscribe: 1
#   <<: *ctest_template
#
# test:tiled-parallel-openmp:
#   variables:
#     ENABLE_MPI: 0
#     ENABLE_OMP: 1
#     CTEST_LABEL: TGP
#   <<: *ctest_template
### CTESTS ###
# .test: &test_template
#   stage: test
#   <<: *before_script_template
#   artifacts:
#     name: $CI_JOB_NAME
#     expire_in: 1 week
#     when: on_failure
#     paths:
#       - build/Testing/
#   only:
#     - schedules
#
#
# .ctest: &ctest_template
#   image: $CI_REGISTRY_IMAGE/nvcc
#   needs: ['build-nvcc-env']
#   script:
#     - cmake -S .
#             -B build
#             -DMFIX_MPI=$ENABLE_MPI
#             -DMFIX_OMP=$ENABLE_OMP
#             -G Ninja
#     - cmake --build build --target build_tests
#     - cd build
#     - srun ctest -R $CTEST_LABEL
#   tags:
#     - docker
#   <<: *test_template
#
# test:single-serial:
#   variables:
#     CTEST_LABEL: SGS
#   <<: *ctest_template
#
# test:multiple-serial:
#   variables:
#     CTEST_LABEL: MGS
#   <<: *ctest_template
#
# test:tiled-serial:
#   variables:
#     CTEST_LABEL: TGS
#   <<: *ctest_template
#
# test:multiple-parallel:
#   variables:
#     CTEST_LABEL: MGP
#     OMPI_MCA_rmaps_base_oversubscribe: 1
#   <<: *ctest_template
#
# test:tiled-parallel-openmp:
#   variables:
#     ENABLE_MPI: 0
#     ENABLE_OMP: 1
#     CTEST_LABEL: TGP
#   <<: *ctest_template
